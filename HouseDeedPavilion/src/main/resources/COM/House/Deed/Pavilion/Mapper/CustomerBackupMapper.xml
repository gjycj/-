<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="COM.House.Deed.Pavilion.Mapper.CustomerBackupMapper">



    <!-- 补充：通用结果集映射（BaseResultMap），关联数据库字段与实体类属性 -->
    <resultMap id="BaseResultMap" type="COM.House.Deed.Pavilion.Entity.CustomerBackup">
        <!-- 主键字段 -->
        <id column="id" property="id"/>
        <!-- 业务字段（与customer_backup表字段一一对应） -->
        <result column="name" property="name"/>
        <result column="phone" property="phone"/>
        <result column="gender" property="gender"/>
        <result column="demand" property="demand"/>
        <result column="source" property="source"/>
        <result column="status" property="status"/>
        <result column="remark" property="remark"/>
        <result column="created_at" property="createdAt"/>
        <result column="updated_at" property="updatedAt"/>
        <result column="created_by" property="createdBy"/>
        <result column="updated_by" property="updatedBy"/>
        <!-- 备份相关字段 -->
        <result column="backup_time" property="backupTime"/>
        <result column="backup_by" property="backupBy"/>
    </resultMap>

    <!-- 新增客户备份记录 -->
    <insert id="insert" parameterType="COM.House.Deed.Pavilion.Entity.CustomerBackup">
        INSERT INTO customer_backup (
        id,
        name,
        phone,
        gender,
        demand,
        source,
        status,
        remark,
        created_at,
        updated_at,
        created_by,
        updated_by,
        backup_time,
        backup_by
        ) VALUES (
        #{id},
        #{name},
        #{phone},
        #{gender},
        #{demand},
        #{source},
        #{status},
        #{remark},
        #{createdAt},
        #{updatedAt},
        #{createdBy},
        #{updatedBy},
        NOW(),  <!-- 备份时间自动填充当前时间 -->
        #{backupBy}
        )
    </insert>

    <!-- 1. 根据ID查询备份记录 -->
    <select id="selectById" parameterType="java.lang.Long" resultMap="BaseResultMap">
        SELECT * FROM customer_backup WHERE id = #{id}
    </select>

    <!-- 2. 根据原客户ID查询备份记录（与selectById等价，语义化） -->
    <select id="selectByCustomerId" parameterType="java.lang.Long" resultMap="BaseResultMap">
        SELECT * FROM customer_backup WHERE id = #{customerId}
    </select>

    <!-- 3. 分页查询所有备份记录（按备份时间倒序，最新删除的在前） -->
    <select id="selectAll" resultMap="BaseResultMap">
        SELECT * FROM customer_backup ORDER BY backup_time DESC
    </select>

    <!-- 4. 根据操作人ID查询其删除的备份记录 -->
    <select id="selectByBackupOperator" parameterType="java.lang.Long" resultMap="BaseResultMap">
        SELECT * FROM customer_backup
        WHERE backup_by = #{backupBy}
        ORDER BY backup_time DESC
    </select>

    <!-- 新增：删除备份记录（用于恢复后清理） -->
    <delete id="deleteById" parameterType="java.lang.Long">
        DELETE FROM customer_backup WHERE id = #{id}
    </delete>

    <!-- 新增：按备份时间范围查询（核心补充） -->
    <select id="selectByTimeRange" resultMap="BaseResultMap">
        SELECT * FROM customer_backup
        <where>
            <!-- 动态条件：如果startTime不为null，添加“备份时间 >= 开始时间” -->
            <if test="startTime != null">
                AND backup_time >= #{startTime}
            </if>
            <!-- 动态条件：如果endTime不为null，添加“备份时间 <= 结束时间” -->
            <if test="endTime != null">
                AND backup_time &lt;= #{endTime}
            </if>
        </where>
        <!-- 按备份时间倒序，最新删除的记录在前 -->
        ORDER BY backup_time DESC
    </select>

</mapper>
